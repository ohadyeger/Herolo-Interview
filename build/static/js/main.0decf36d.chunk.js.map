{"version":3,"sources":["client/components/ListView/Emails/constants.js","client/components/ListView/Emails/actions.js","client/components/ListView/Emails/EmailsList.js","client/components/ListView/Emails/Emails.js","client/components/Forms/ComposeForm/constants.js","client/components/Forms/ComposeForm/actions.js","client/components/Forms/ComposeForm/ComposeForm.js","client/components/App/App.js","client/components/App/index.js","client/initialState.js","client/components/Forms/ComposeForm/reducer.js","client/components/ListView/Emails/reducer.js","client/reducers.js","client/components/App/saga.js","client/components/Forms/ComposeForm/saga.js","client/components/ListView/Emails/saga.js","client/sagas.js","index.js"],"names":["EmailsActionsConstants","EmailsActions","loadEmails","type","uri","loadEmailsSuccess","emails","loadEmailsFail","err_msg","removeEmail","_id","removeEmailSuccess","removeEmailFail","confirmShow","id","emailComponent","setState","confirmOpen","confirmId","EmailsList","Segment","map","email","index","Container","key","Breadcrumb","Label","Icon","name","subject","senderId","receiverId","Button","size","negative","onClick","message","Divider","section","Emails","props","openRemoveEmailModal","event","chosenEmail","remove_email_modal","getReceivedMessages","filter","review","filterSentMessages","getSentMessages","filterReceivedMessages","state","confirmResult","deleteFail","deleteSucc","handleIdChange","bind","closeRemoveEmailModal","this","console","log","target","value","Fragment","Message","positive","Header","Grid","columns","Row","Column","Confirm","content","open","onCancel","onConfirm","divided","centered","Form","onSubmit","handleSubmit","Field","className","onChange","placeholder","Tab","panes","menuItem","render","Pane","React","Component","connect","get","dispatch","ComposeFormConstants","ComposeFormActions","submitCompose","messageObj","compose","submitComposeSuccess","submitComposeFail","ComposeForm","submitSucc","submitFail","handleSubjectChange","handleContentChange","handleSenderIdChange","handleReceiverIdChange","resetForm","submitNewEmail","Group","widths","Input","fluid","label","error","TextArea","style","minHeight","rows","disabled","emailObj","App","basename","process","height","backgroundImage","backgroundSize","backgroundRepeat","resizeMode","Menu","fixed","inverted","Item","header","as","href","width","exact","path","loadUserEventHandler","AppActions","authenticate","page_permissions","logout","Map","require","app","composeForm","ComposeFormReducer","initialState","action","set","EmailsReducer","combineReducers","AppReducer","AppSaga","submitEmail","ComposeFormSaga","call","fetch","method","headers","body","JSON","stringify","emailResponse","put","takeEvery","EmailsSaga","emailsResponse","emailsJson","Sagas","all","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","applyMiddleware","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0decf36d.chunk.js","sourcesContent":["const EmailsActionsConstants = {\n  EMAILS_LOAD: \"EMAILS_LOAD\",\n  EMAILS_LOAD_SUCC: \"EMAILS_LOAD_SUCC\",\n  EMAILS_LOAD_FAIL: \"EMAILS_LOAD_FAIL\",\n  REMOVE_EMAIL: \"REMOVE_EMAIL\",\n  REMOVE_EMAIL_SUCC: \"REMOVE_EMAIL_SUCC\",\n  REMOVE_EMAIL_FAIL: \"REMOVE_EMAIL_FAIL\",\n};\n\nexport { EmailsActionsConstants };\n","import { EmailsActionsConstants } from \"./constants\";\n\nfunction loadEmails() {\n  return {\n    type: EmailsActionsConstants.EMAILS_LOAD,\n    uri: \"/api/email/getall\",\n  };\n}\nfunction loadEmailsSuccess(emails) {\n  return {\n    type: EmailsActionsConstants.EMAILS_LOAD_SUCC,\n    emails: emails,\n  };\n}\nfunction loadEmailsFail(err_msg) {\n  return {\n    type: EmailsActionsConstants.EMAILS_LOAD_FAIL,\n    err_msg: err_msg,\n  };\n}\nfunction removeEmail(_id) {\n  return {\n    type: EmailsActionsConstants.REMOVE_EMAIL,\n    uri: \"/api/email/delete/\" + _id,\n  };\n}\nfunction removeEmailSuccess(emails) {\n  return {\n    type: EmailsActionsConstants.REMOVE_EMAIL_SUCC,\n    emails: emails,\n  };\n}\nfunction removeEmailFail(err_msg) {\n  return {\n    type: EmailsActionsConstants.REMOVE_EMAIL_FAIL,\n    err_msg: err_msg,\n  };\n}\n\nconst EmailsActions = {\n  loadEmails,\n  loadEmailsSuccess,\n  loadEmailsFail,\n  removeEmail,\n  removeEmailSuccess,\n  removeEmailFail,\n};\n\nexport default EmailsActions;\n","import React from \"react\";\nimport {\n  // Accordion,\n  Icon,\n  Button,\n  Segment,\n  Label,\n  // Item,\n  Breadcrumb,\n  Container,\n  Divider,\n  // Message,\n  // Grid,\n} from \"semantic-ui-react\";\n// const handleClick = (index) => (state.accordionIndex = index);\nconst confirmShow = (id, emailComponent) => () =>\n  emailComponent.setState({ confirmOpen: true, confirmId: id });\nconst EmailsList = (emailComponent, emails) => (\n  <Segment>\n    {/* <Accordion styled fluid> */}\n    {emails.map((email, index) =>\n      email ? (\n        <Container key={index}>\n          <Breadcrumb>\n            <Label>\n              <Icon name=\"mail\" />\n              Subject: {email.subject}\n            </Label>\n            <Label>From: {email.senderId}</Label>\n            <Label>To: {email.receiverId}</Label>\n            <Button\n              size=\"mini\"\n              negative\n              onClick={confirmShow(email._id, emailComponent)}\n            >\n              Remove\n            </Button>\n          </Breadcrumb>\n\n          <p>Message:</p>\n          <Segment>{email.message}</Segment>\n          <Divider section />\n        </Container>\n      ) : (\n        []\n      )\n    )}\n  </Segment>\n);\nexport default EmailsList;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport EmailsActions from \"./actions\";\nimport EmailsList from \"./EmailsList\";\nimport { Grid, Message, Tab, Segment, Form, Confirm } from \"semantic-ui-react\";\n\nconst filterReceivedMessages = (id) => (review) => review.receiverId === id;\nconst filterSentMessages = (id) => (review) => review.senderId === id;\n\nclass Emails extends React.Component {\n  componentDidMount() {\n    this.props.loadEmails();\n    console.log(this.state);\n    this.setState();\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: -1,\n      remove_email_modal: false,\n      chosenEmail: null,\n      confirmOpen: false,\n      confirmResult: \"\",\n      confirmId: -1,\n      deleteFail: false,\n      deleteSucc: false,\n    };\n    // this.createMailList = this.createMailList.bind(this);\n    this.handleIdChange = this.handleIdChange.bind(this);\n    this.getReceivedMessages = this.getReceivedMessages.bind(this);\n    this.getSentMessages = this.getSentMessages.bind(this);\n    this.openRemoveEmailModal = this.openRemoveEmailModal.bind(this);\n    this.closeRemoveEmailModal = this.closeRemoveEmailModal.bind(this);\n    this.removeEmail = this.removeEmail.bind(this);\n  }\n\n  handleIdChange(event) {\n    this.setState({\n      id: event.target.value,\n    });\n  }\n  closeRemoveEmailModal(event) {\n    this.setState({\n      remove_email_modal: false,\n    });\n  }\n\n  openRemoveEmailModal = (index) => (event) => {\n    this.setState({\n      chosenEmail: this.props.emails[index]._id,\n      remove_email_modal: true,\n    });\n  };\n\n  removeEmail() {\n    return () => {\n      this.setState({ confirmOpen: false });\n      this.props.removeEmail(this.state.confirmId);\n    };\n  }\n  getReceivedMessages = (id) =>\n    this.props.emails.filter(filterSentMessages(id));\n  getSentMessages = (id) =>\n    this.props.emails.filter(filterReceivedMessages(id));\n\n  render() {\n    const handleCancel = () =>\n      this.setState({ confirmResult: \"cancelled\", confirmOpen: false });\n    return (\n      <React.Fragment>\n        {this.props.deleteSucc ? (\n          <Message positive>\n            <Message.Header>Delete Completed Successfully</Message.Header>\n            <p>\n              Go to your <b>Compose Email Page</b> to add a new message.\n            </p>\n          </Message>\n        ) : (\n          []\n        )}\n        {this.props.deleteFail ? (\n          <Message negative>\n            <Message.Header>Deleting Message Failed</Message.Header>\n            <p>Please try again later.</p>\n          </Message>\n        ) : (\n          []\n        )}\n        <div>\n          <Grid columns=\"three\">\n            <Grid.Row>\n              <Grid.Column>\n                <Confirm\n                  content=\"Are you sure you want to delete this email?\"\n                  size=\"mini\"\n                  open={this.state.confirmOpen}\n                  onCancel={handleCancel}\n                  onConfirm={this.removeEmail()}\n                />\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </div>\n        <Grid columns=\"three\" divided centered>\n          <Grid.Row>\n            {/* <Grid.Column></Grid.Column> */}\n            <Grid.Column>\n              <Form onSubmit={this.handleSubmit}>\n                <Form.Field>\n                  <label>Insert ID</label>\n                  <input\n                    type=\"number\"\n                    value={this.state.id}\n                    className=\"form-control\"\n                    onChange={this.handleIdChange}\n                    placeholder=\"receiver id\"\n                  />\n                </Form.Field>\n              </Form>\n              <Segment>\n                <Tab\n                  panes={[\n                    {\n                      menuItem: \"Received\",\n                      render: () => (\n                        <Tab.Pane>\n                          {EmailsList(\n                            this,\n                            this.getReceivedMessages(this.state.id)\n                          )}\n                        </Tab.Pane>\n                      ),\n                    },\n                    {\n                      menuItem: \"Sent\",\n                      render: () => (\n                        <Tab.Pane>\n                          {EmailsList(\n                            this,\n                            this.getSentMessages(this.state.id)\n                          )}\n                        </Tab.Pane>\n                      ),\n                    },\n                  ]}\n                />\n              </Segment>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    emails: state[\"emails\"].get(\"emails\"),\n    deleteSucc: state[\"emails\"].get(\"deleteSucc\"),\n    deleteFail: state[\"emails\"].get(\"deleteFail\"),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    loadEmails: () => {\n      dispatch(EmailsActions.loadEmails());\n    },\n    removeEmail: (_id) => {\n      dispatch(EmailsActions.removeEmail(_id));\n    },\n  };\n};\n\nEmails.propTypes = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Emails);\n","const ComposeFormConstants = {\n  COMPOSE_FORM_SUBMIT: \"COMPOSE_FORM_SUBMIT\",\n  COMPOSE_FORM_SUBMIT_SUCC: \"COMPOSE_FORM_SUBMIT_SUCC\",\n  COMPOSE_FORM_SUBMIT_FAIL: \"COMPOSE_FORM_SUBMIT_FAIL\",\n};\n\nexport { ComposeFormConstants };\n","import { ComposeFormConstants } from \"./constants\";\n\nfunction submitCompose(messageObj) {\n  return {\n    type: ComposeFormConstants.COMPOSE_FORM_SUBMIT,\n    uri: \"/api/email/write\",\n    compose: messageObj,\n  };\n}\nfunction submitComposeSuccess(compose) {\n  return {\n    type: ComposeFormConstants.COMPOSE_FORM_SUBMIT_SUCC,\n    compose: compose,\n  };\n}\nfunction submitComposeFail(err_msg) {\n  return {\n    type: ComposeFormConstants.COMPOSE_FORM_SUBMIT_FAIL,\n    err_msg: err_msg,\n  };\n}\n\nconst ComposeFormActions = {\n  submitCompose,\n  submitComposeSuccess,\n  submitComposeFail,\n};\n\nexport default ComposeFormActions;\n","import React from \"react\";\nimport {\n  Grid,\n  // List,\n  Segment,\n  Form,\n  // TextArea,\n  // Button,\n  // Menu,\n  // Input,\n  Message,\n} from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport ComposeFormActions from \"./actions\";\n\nclass ComposeForm extends React.Component {\n  // componentDidMount() {}\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      subject: \"\",\n      message: \"\",\n      senderId: -1,\n      receiverId: -1,\n      submitSucc: false,\n      submitFail: false,\n    };\n\n    this.handleSubjectChange = this.handleSubjectChange.bind(this);\n    this.handleContentChange = this.handleContentChange.bind(this);\n    this.handleSenderIdChange = this.handleSenderIdChange.bind(this);\n    this.handleReceiverIdChange = this.handleReceiverIdChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.resetForm = this.resetForm.bind(this);\n  }\n  resetForm() {\n    this.setState({\n      subject: \"\",\n      message: \"\",\n      senderId: -1,\n      receiverId: -1,\n    });\n  }\n  handleSubjectChange(event) {\n    this.setState({\n      subject: event.target.value,\n    });\n  }\n\n  handleContentChange(event) {\n    this.setState({\n      message: event.target.value,\n    });\n  }\n\n  handleSenderIdChange(event) {\n    this.setState({\n      senderId: event.target.value,\n    });\n  }\n  handleReceiverIdChange(event) {\n    this.setState({\n      receiverId: event.target.value,\n    });\n  }\n\n  handleSubmit(event) {\n    const email = {\n      subject: this.state.subject,\n      message: this.state.message,\n      senderId: this.state.senderId,\n      receiverId: this.state.receiverId,\n    };\n    this.props.submitNewEmail(email);\n    // this.resetForm();\n    console.log(\"submitted new email\");\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Grid columns=\"three\" divided centered>\n          <Grid.Row>\n            {/* <Grid.Column></Grid.Column> */}\n            <Grid.Column>\n              <Segment>\n                {this.props.submitSucc ? (\n                  <Message positive>\n                    <Message.Header>\n                      New Message Submitted Successfully\n                    </Message.Header>\n                    <p>\n                      Go to your <b>Manage Emails Page</b> to see your message.\n                    </p>\n                  </Message>\n                ) : (\n                  []\n                )}\n                {this.props.submitFail ? (\n                  <Message negative>\n                    <Message.Header>\n                      New Message Submission Failed\n                    </Message.Header>\n                    <p>Please try again later.</p>\n                  </Message>\n                ) : (\n                  []\n                )}\n                <Form onSubmit={this.handleSubmit}>\n                  <Form.Group widths=\"equal\">\n                    <Form.Input\n                      type=\"number\"\n                      fluid\n                      label=\"Sender ID\"\n                      placeholder=\"to\"\n                      error={this.state.senderId < 1}\n                      onChange={this.handleSenderIdChange}\n                      value={this.state.senderId}\n                    />\n                    <Form.Input\n                      type=\"number\"\n                      fluid\n                      label=\"Receiver ID\"\n                      placeholder=\"from\"\n                      error={this.state.receiverId < 1}\n                      onChange={this.handleReceiverIdChange}\n                      value={this.state.receiverId}\n                    />\n                  </Form.Group>\n                  <Form.Group widths=\"equal\">\n                    <Form.Input\n                      fluid\n                      label=\"subject\"\n                      placeholder=\"subject\"\n                      error={this.state.subject === \"\"}\n                      onChange={this.handleSubjectChange}\n                      value={this.state.subject}\n                    />\n                  </Form.Group>\n                  <Form.TextArea\n                    label=\"Message\"\n                    placeholder=\"compose your message here...\"\n                    style={{ minHeight: 100 }}\n                    onChange={this.handleContentChange}\n                    value={this.state.message}\n                    rows={5}\n                    error={this.state.message === \"\"}\n                  />\n                  {/* <Form.Field>\n            <label>Sender ID</label>\n            <input\n              type=\"number\"\n              value={this.state.senderId}\n              className=\"form-control\"\n              onChange={this.handleSenderIdChange}\n              placeholder=\"sender id\"\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Receiver ID</label>\n            <input\n              type=\"number\"\n              value={this.state.receiverId}\n              className=\"form-control\"\n              onChange={this.handleReceiverIdChange}\n              placeholder=\"receiver id\"\n            />\n          </Form.Field> */}\n                  {/* <Form.Field> */}\n                  {/* <label>Subject</label>\n            <input\n              type=\"text\"\n              value={this.state.subject}\n              className=\"form-control\"\n              onChange={this.handleSubjectChange}\n              placeholder=\"First name\"\n              // error={this.state.subject === \"\"}\n            />\n          </Form.Field> */}\n                  <Form.Input\n                    type=\"submit\"\n                    value=\"Submit\"\n                    disabled={\n                      !(\n                        this.state.subject &&\n                        this.state.message &&\n                        this.state.senderId > 0 &&\n                        this.state.receiverId > 0\n                      )\n                    }\n                  />\n                </Form>\n                <br />\n              </Segment>\n            </Grid.Column>\n            {/* <Grid.Column></Grid.Column> */}\n          </Grid.Row>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state, props) => {\n  return {\n    submitFail: state[\"composeForm\"].get(\"submitFail\"),\n    submitSucc: state[\"composeForm\"].get(\"submitSucc\"),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitNewEmail: (emailObj) =>\n      dispatch(ComposeFormActions.submitCompose(emailObj)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ComposeForm);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport AppActions from \"./actions\";\nimport Emails from \"../ListView/Emails/Emails\";\nimport ComposeForm from \"../Forms/ComposeForm/ComposeForm\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Icon, Menu, Container } from \"semantic-ui-react\";\n\nconst BackgroundUrl =\n  \"https://herolo.co.il/portfolio-background-new2.2fef25b1c7370a4cff57.jpg\"; // \"http://www.soos.org.il/wp-content/uploads/2019/08/soos-mini-site-baner.jpg\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Container>\n          <div\n            style={{\n              height: \"100%\",\n              backgroundImage: `url(${BackgroundUrl})`,\n              backgroundSize: \"cover\",\n              backgroundRepeat: \"yes\",\n              resizeMode: \"stretch\",\n            }}\n          >\n            <div style={{ height: \"7%\" }}>\n              <Menu fixed=\"top\" inverted style={{ height: \"7%\" }}>\n                <Menu.Item header as=\"a\" href=\"/\">\n                  <Icon name=\"home\" />\n                  Herolo Full Stack Assignment\n                </Menu.Item>\n                <Menu.Item header as=\"a\" href=\"/compose\">\n                  <Icon name=\"compose\" />\n                  Compose Email Page\n                </Menu.Item>\n                <Menu.Item header as=\"a\" href=\"/manage\">\n                  <Icon name=\"mail\" />\n                  Manage Emails Page\n                </Menu.Item>\n              </Menu>\n            </div>\n            <section style={{ height: \"93%\", width: \"100%\" }}>\n              <Switch style={{ height: \"100%\", width: \"100%\" }}>\n                <Route exact path={\"\"}>\n                  Welcome\n                </Route>\n                <Route exact path={\"/compose\"}>\n                  <ComposeForm />\n                </Route>\n                <Route exact path={\"/manage\"}>\n                  <Emails />\n                </Route>\n              </Switch>\n            </section>\n          </div>\n        </Container>\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = (state, props) => {\n  return {};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    loadUserEventHandler: (name) => {\n      dispatch(AppActions.loadUserEventHandler(name));\n    },\n    authenticate: (page_permissions) =>\n      dispatch(AppActions.authenticate(page_permissions)),\n    logout: () => dispatch(AppActions.logout()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import App from './App';\n\nexport default App;\n","const { Map } = require(\"immutable\");\n\nexport default {\n  app: Map({}),\n  emails: Map({ emails: [], deleteSucc: false, deleteFail: false }),\n  composeForm: Map({ submitSucc: false, submitFail: false }),\n};\n","import { ComposeFormConstants } from \"./constants\";\nimport initialState from \"../../../initialState\";\n\nconst ComposeFormReducer = (state = initialState.composeForm, action) => {\n  switch (action.type) {\n    case ComposeFormConstants.COMPOSE_FORM_SUBMIT_SUCC:\n      console.log(\"Email sent!\");\n      state = state.set(\"submitSucc\", true);\n      return state;\n    case ComposeFormConstants.COMPOSE_FORM_SUBMIT_FAIL:\n      console.log(\"Email sending failed!\");\n      state = state.set(\"submitFail\", true);\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default ComposeFormReducer;\n","import { EmailsActionsConstants } from \"./constants\";\nimport initialState from \"../../../initialState\";\n\nconst EmailsReducer = (state = initialState.emails, action) => {\n  switch (action.type) {\n    case EmailsActionsConstants.EMAILS_LOAD_SUCC:\n      console.log(\"Reducer: emails\", action.emails);\n      state = state.set(\"emails\", action.emails);\n      return state;\n\n    case EmailsActionsConstants.EMAILS_LOAD_FAIL:\n      console.log(\"email load failed\");\n      state = state.set(\"deleteFail\", true);\n      return state;\n    case EmailsActionsConstants.REMOVE_EMAIL_SUCC:\n      console.log(action);\n      state = state.set(\"emails\", action.emails);\n      state = state.set(\"deleteSucc\", true);\n\n      console.log(\"Reducer: email removed\");\n      // state = state.set(\"emails\", action.emails);\n      return state;\n\n    case EmailsActionsConstants.REMOVE_EMAIL_FAIL:\n      console.log(\"email remove failed\");\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default EmailsReducer;\n","import { combineReducers } from \"redux\";\nimport AppReducer from \"./components/App/reducer\";\nimport ComposeFormReducer from \"./components/Forms/ComposeForm/reducer\";\nimport EmailsReducer from \"./components/ListView/Emails/reducer\";\n\nexport default combineReducers({\n  app: AppReducer,\n  emails: EmailsReducer,\n  composeForm: ComposeFormReducer,\n});\n","// import { takeEvery, put, call } from \"redux-saga/effects\";\n// import { AppActionsConstants } from \"./constants\";\n// // import {AuthenticationFormActions} from \"../Forms/AuthenticationForm/actions\";\n// import { browserHistory } from \"react-router\";\n\n// function* logout(action) {\n//   try {\n//     const logoutResponse = yield call(fetch, action.uri, {\n//       methods: \"GET\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//     });\n\n//     const logoutResponseJson = yield call([logoutResponse, \"json\"]);\n//   } catch (e) {}\n// }\n\n// function* authenticate(action){\n//     try{\n//         const authResponse = yield call(fetch, action.uri, {\n//             method: 'POST',\n//             headers: {\n//                 \"Content-Type\": \"application/json\"\n//             },\n//             body: JSON.stringify(action.data)\n//         })\n\n//         const {status, permissions, msg} = yield call([authResponse, 'json'])\n//         yield put(AuthenticationFormActions.loginSuccess(status, permissions))\n//     } catch(e){\n//         // yield put(AuthenticationFormActions.loginSuccess(true))\n//     }\n// }\nfunction* AppSaga() {\n  // yield takeEvery(AppActionsConstants.LOGOUT, logout);\n  // yield takeEvery(AppActionsConstants.AUTH, authenticate);\n}\n\nexport default AppSaga;\n","import { ComposeFormConstants } from \"./constants\";\nimport { call, put, takeEvery } from \"redux-saga/effects\";\nimport ComposeForm from \"./actions\";\n// import popupMessage from \"../../../NotificationHandler\";\n\n//IMPLEMENT!\nfunction* submitEmail(action) {\n  try {\n    const emailResponse = yield call(fetch, action.uri, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(action.compose),\n    });\n\n    // const { status, msg } = yield call([emailResponse, \"json\"]);\n    // // popupMessage(status, msg);\n    // console.log(\"Email Write Saga \", action.compose);\n    yield put(ComposeForm.submitComposeSuccess(emailResponse));\n  } catch (e) {\n    yield put(ComposeForm.submitComposeFail(e.message));\n  }\n}\n\nfunction* ComposeFormSaga() {\n  yield takeEvery(ComposeFormConstants.COMPOSE_FORM_SUBMIT, submitEmail);\n}\n\nexport default ComposeFormSaga;\n","import { EmailsActionsConstants } from \"./constants\";\nimport { call, put, takeEvery } from \"redux-saga/effects\";\nimport EmailsActions from \"./actions\";\n\nfunction* loadEmails(action) {\n  try {\n    const emailsResponse = yield call(fetch, action.uri, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const emailsJson = yield call([emailsResponse, \"json\"]); //retrieve body of response\n\n    yield put(EmailsActions.loadEmailsSuccess(emailsJson));\n  } catch (e) {\n    yield put(EmailsActions.loadEmailsFail(e.message));\n  }\n}\nfunction* removeEmail(action) {\n  try {\n    const emailsResponse = yield call(fetch, action.uri, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const emailsJson = yield call([emailsResponse, \"json\"]); //retrieve body of response\n\n    yield put(EmailsActions.removeEmailSuccess(emailsJson));\n  } catch (e) {\n    yield put(EmailsActions.removeEmailFail(e.message));\n  }\n}\n\nfunction* EmailsSaga() {\n  yield takeEvery(EmailsActionsConstants.EMAILS_LOAD, loadEmails);\n  yield takeEvery(EmailsActionsConstants.REMOVE_EMAIL, removeEmail);\n}\n\nexport default EmailsSaga;\n","import { all } from \"redux-saga/effects\";\nimport AppSaga from \"./components/App/saga\";\nimport ComposeFormSaga from \"./components/Forms/ComposeForm/saga\";\nimport EmailsSaga from \"./components/ListView/Emails/saga\";\n\nexport default function* Sagas() {\n  yield all([AppSaga(), ComposeFormSaga(), EmailsSaga()]);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport App from \"./client/components/App/index\";\nimport reducers from \"./client/reducers\";\nimport Sagas from \"./client/sagas\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n\n//create saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n//create store, add reducers, attach saga\nconst store = createStore(reducers, applyMiddleware(sagaMiddleware));\n\n//run saga(s)\nsagaMiddleware.run(Sagas);\n\n// Render the main component into the dom\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}